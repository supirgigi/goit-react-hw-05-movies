{"version":3,"file":"static/js/933.c9d9b911.chunk.js","mappings":"2RACA,GAAgB,KAAO,mBAAmB,KAAO,oB,SCM3CA,EAAO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OACE,eAAIC,UAAWC,EAAAA,KAAf,SACGF,EAAKG,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,GAAIC,EAAxB,EAAwBA,aAAxB,OACR,gBAAaN,UAAWC,EAAAA,KAAxB,WACE,gBACEM,IAAKD,EAAeE,EAAAA,GAAWF,EAAeG,EAC9CC,IAAKP,EAAO,SACZH,UAAWC,EAAAA,OAEb,uBAAIE,KACJ,kCAAUC,OAPHC,EADD,KAaf,EAEDP,EAAKa,aAAe,CAClBZ,KAAM,IAcR,QCMA,EArCsB,WACpB,OAAwBa,EAAAA,EAAAA,UAAS,IAAjC,eAAOb,EAAP,KAAac,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAEQZ,GAAOa,EAAAA,EAAAA,MAAPb,GAuBR,OArBAc,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,2FACrBL,GAAW,GACXE,EAAS,MAFY,mBAKEI,EAAAA,EAAAA,IAAahB,GALf,UAMQ,KADrBiB,EALa,QAMRvB,KAAKwB,OANG,sBAOX,IAAIC,MAAM,yCAPC,OASnBX,EAAQS,EAAOvB,MATI,kDAWnBkB,EAAS,EAAD,IAXW,yBAanBF,GAAW,GAbQ,6EAAH,qDAiBpBK,GACD,GAAE,CAACf,KAGF,gCACGN,EAAKwB,OAAS,IAAK,SAAC,EAAD,CAAMxB,KAAMA,IAC/Be,IAAW,SAACW,EAAA,EAAD,IACXT,IAAS,SAACU,EAAA,EAAD,CAAUV,MAAOA,EAAMW,YAGtC,C,2NC1CYnB,EAAW,kCAElBoB,EAAWC,EAAAA,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,KAAM,KAIGC,EAAW,mCAAG,sGACFN,EAASO,IAAI,uBADX,uBACjBC,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,qDAKXC,EAAY,mCAAG,WAAMC,GAAN,yFACHV,EAASO,IAAI,gBAAiB,CACnDJ,OAAQ,CACNO,MAAAA,KAHsB,uBAClBF,EADkB,EAClBA,KADkB,kBAMnBA,GANmB,2CAAH,sDASZG,EAAe,mCAAG,WAAMlC,GAAN,yFACNuB,EAASO,IAAT,iBAAuB9B,IADjB,uBACrB+B,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAKff,EAAY,mCAAG,WAAMhB,GAAN,yFACHuB,EAASO,IAAT,iBAAuB9B,EAAvB,aADG,uBAClB+B,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZI,EAAe,mCAAG,WAAMnC,GAAN,yFACNuB,EAASO,IAAT,iBAAuB9B,EAAvB,aADM,uBACrB+B,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,qD,uDCnC5B,MAAuB,wB,SCWvB,EARiB,SAAC,GAAe,IAAbpB,EAAY,EAAZA,MAClB,OAAO,cAAGhB,UAAWC,EAAd,SAA4Be,GACpC,C","sources":["webpack://react-homework-template/./src/modules/Cast/cast.module.css?9d92","modules/Cast/Cast.jsx","pages/MovieCastPage/MovieCastPage.jsx","shared/api/movies.js","webpack://react-homework-template/./src/shared/components/ErrorMsg/error-msg.module.css?03c9","shared/components/ErrorMsg/ErrorMsg.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"cast_list__51ksD\",\"item\":\"cast_item__aHuI4\"};","import PropTypes from 'prop-types';\n\nimport { imageUrl } from 'shared/api/movies';\nimport placeholderImg from 'shared/placeholder/placeholder.jpg';\n\nimport styles from './cast.module.css';\n\nconst Cast = ({ cast }) => {\n  return (\n    <ul className={styles.list}>\n      {cast.map(({ name, character, id, profile_path }) => (\n        <li key={id} className={styles.item}>\n          <img\n            src={profile_path ? imageUrl + profile_path : placeholderImg}\n            alt={name + ' photo'}\n            className={styles.img}\n          />\n          <p>{name}</p>\n          <p>Role: {character}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nCast.defaultProps = {\n  cast: [],\n};\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      profile_path: PropTypes.string,\n    })\n  ),\n};\n\nexport default Cast;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport Loader from 'shared/components/Loader';\nimport ErrorMsg from 'shared/components/ErrorMsg';\nimport { getMovieCast } from 'shared/api/movies';\n\nimport Cast from 'modules/Cast';\n\nconst MovieCastPage = () => {\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const result = await getMovieCast(id);\n        if (result.cast.length === 0) {\n          throw new Error('No cast info available for this movie');\n        }\n        setCast(result.cast);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchMovieCast();\n  }, [id]);\n\n  return (\n    <>\n      {cast.length > 0 && <Cast cast={cast} />}\n      {loading && <Loader />}\n      {error && <ErrorMsg error={error.message} />}\n    </>\n  );\n};\n\nexport default MovieCastPage;\n","import axios from 'axios';\n\nexport const imageUrl = 'https://image.tmdb.org/t/p/w300';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'd69968ee858c93c3dbc043339ed72979',\n    page: 1,\n  },\n});\n\nexport const getTrending = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n  return data;\n};\n\nexport const searchMovies = async query => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\n\nexport const getMovieDetails = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getMovieCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n};\n\nexport const getMovieReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"text\":\"error-msg_text__XCU1C\"};","import PropTypes from 'prop-types';\n\nimport styles from './error-msg.module.css';\n\nconst ErrorMsg = ({ error }) => {\n  return <p className={styles.text}>{error}</p>;\n};\n\nErrorMsg.propTypes = {\n  error: PropTypes.string.isRequired,\n};\n\nexport default ErrorMsg;\n"],"names":["Cast","cast","className","styles","map","name","character","id","profile_path","src","imageUrl","placeholderImg","alt","defaultProps","useState","setCast","loading","setLoading","error","setError","useParams","useEffect","fetchMovieCast","getMovieCast","result","length","Error","Loader","ErrorMsg","message","instance","axios","baseURL","params","api_key","page","getTrending","get","data","searchMovies","query","getMovieDetails","getMovieReviews"],"sourceRoot":""}